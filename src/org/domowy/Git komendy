
[1] Po stworzeniu lokalnego repozytorium Git uruchamiamy konsole Git na folderze i możemy wykonać działania na lokalnym repo

Modified (zmodyfikowany) -> Staged (śledzony) -> Committed (zatwierdzony)

/git init / -> utworzenie repo lokalne

/ git status / -> sprawdza stan plików na branchu (domyślnie master) -> zaleca się często używać
/ git add <plik> / -> dodaj do przechowalni plik (dodanie na stage inaczej)
/ git add . / -> dodaj wszystkie pliki do przechowalni (dodanie na stage inaczej)
/ git commit -m "Plik spisu komend dodalem" / -> zapisanie zmian do lokalnego repozytorium


[2] Czynności przed Commit:

/ git clean / -> usuwa pliki które nie zostały jeszcze dodane na stage (add)
/ git clean -n / -> jakie pliki dokładnie zostaną usnięte
/ git clean -nd / -> pełna lista plików do usunięcia (plikin i foldery)
/ git clean -idf / -> tryb interaktywny, po koleji wybierz co zrobić z plikami / folderami

/ git reset / -> cofnięcie pliku ze stage do statusu modified/working directory (odwrotność add)

/ git checkout/restore / -> po wprowadzeniu zmian w pliku (który był już wczesniej dodany na stage) otrzymuje
  on status modified aby cofnąć zmiany w pliku korzystamy z operacji git checkout/restore

/ git rm / -> usuniecie plików z repo -> w drugim ruchu git commit -m "" celem faktycznego usuniecia z repo


[3] Przywracanie zmian:

/ git log --oneline / -> pokazuje w formie logu ostatnie committy

/ git checkout <id committu <0bb653f1>> / -> cofnięcie do tego commitu
/ git checkout -b <new branch name> / -> zmiany cofniętego committa można je wrzucić na nowy branch
/ git checkout master / -> powrót do bieżącej wersji projektu
/ git revert <id commituc<0bb653f1>>/ -> cofa zmiany w danym commicie i zapisuje je w nowym, nie zmienia historii commitów
/ git reset / -> tylko commity które nie zostały jeszcze opublikowane w repo publicznym, ingeruje w historię commitów,
usuwa commit z historii

[4] Przeglądanie historii

/ git log / -> cała historia git
/ git log --help / -> wszystkie opcje git log
/ git log --oneline / -> zwięzły log w postaci listy
/ git log --author="Konrad" / -> commity konkretnej osoby
/ git log --grep="Koniec" / -> commity zawierające daną fraze w komentarzu
/ git log --oneline -3 / -> trzy ostatnie commity
/ git log --oneline -- <nazwa pliku> / -> commity które zmieniały wskazany plik
/ git shortlog / -> lista commitów per użytkownik

[5] Komentarze

 - podzielenie komentarza na tytul i tresc

 zamiast dodawać flagę -m"" dodajmy commit bez tej flagi -> uruchomi się domyślny edytor

 - długość tytułu komentarza max do 50 znaków
 - tytuł wielką literą
 - nie dodawać kropki na końcu tytułu
 - tryb rozkazujący w tytule
 - długość wiersza treści do 72 znaków
 - treść komentarza : co? i dlaczego?

W Intellij łatwiej -> od razu można dodać kilka linii opisu

[6] Git Stash

/ git branch / -> sprawdza ile i jakie branche sa, * pokazuje obecnie używany
/ git checkout <nazwa branch> / -> przełączenie między branchami

Jeśli mamy nie zapisane zmiany w pliku to nie można przełączyć się miedzy branchami - wiazalo by sie to z nadpisaniem
zmian wtedy należy albo zrobic commit albo:

- / git stash /  -> dodanie zmian niezapisanych na 'stos' = zmiany z katalogu roboczego zostaly 'odlozone' na bok
- / git checkout <nazwa branch> / -> przelaczenie na drugi branch
- / git stash pop / -> przywrócenie zmian odlozonych na 'stos'

/ git stash push -m"dodaj komentarz" / -> niezapisane zmiany odkladamy na 'stos' wraz z komenatrzem
/ git stash list / -> lista aktualnie dodanych zmian na 'stosie'
/ git stash push -m"dodaj komentarz" -u / -> dodanie na 'stos' zmian które nie sa jeszcze śledzone przez git
np. nowy plik
/ git stash apply <id ze stosu> / -> zmiany ze 'stosu' mozna przwracać tym poleceniem, w tym przypadku przywrócone zostaja do
katalogu roboczego i zostają na 'stosie'

/ git stash pop <id ze stosu> / -> zmiany ze 'stosu' mozna przwracać tym poleceniem, w tym przypadku przywrócone zostaja do
                                   katalogu roboczego i usuniete ze 'stosie'

/ git stash drop <id ze stosu> / -> usuniecie zmian ze stosu wybranej zmiany (stash)
/ git stash clear / -> wyczyszczenie calego stosu

Jeśli mam niezapisane zmiany w plikach mogę je najpierw odłozyć na bok na 'stos' i zakładajac nowy branch odrazu je
dodać do niego

niezpisane zmiany dodaje na 'stos' -> /git stash /
/ git stash branch <nazwa brancha nowego> / -> wrzucenie zmian ze 'stosu' odrazu na nowy branch

[7] Branch

/ git branch <nazwa nowego brancha> / -> tworzy nowy branch
/ git branch / -> wyswietla liste branchy
/ git checkout <nazwa brancha> / -> przelaczenie sie na inny branch

po przelaczeniu wprowadzamy zmiany i rozwijamy projekt -> standardowo po zmianach w plikach:

git add . -> git commit -m "" -> git push

/ git merge <nazwa brancha który chcemy polaczyc> / czyli jesli develop chce polaczyc z masterem należy upewnic sie
że jestem na branch 'master' i wskazuje git merge develop

Po polaczeniu branchy niepotrzebny mozna juz usunac:
/ git branch -D develop / -> usuwanie brancha 'develop'

Dobre praktyki:

Podzial na 5 glownych branchy:
- Master -> produkcyjny
- Dev -> śr developerskie polaczone ze śr testowym
- Faeature branch -> praca nad nowa funkcja
- User branch indywidualna praca usera -> zmiany trafiaja na feature branch
- Test / Bug -> szybkie poprawki i fixy

[8] Zdalne repozytorium i fork -> remote repo

/ git push / -> wysłanie zmian z lokalnego repo do zdalnego (gitlab)
/ git fetch / -> pobranie zmian ze zdalnego repo do lokalnego -> wykonywać przed rozpoczęciem pracy aby lokalne było aktualne
/ git merge origin/<nazwa brancha> / -> jeśli ze zdalnego repo ściągnięto zmiany do repo lokalnego (origin/master)
trzeba tym poleceniem odświeżyć lokalnego 'master'

/ git remote add origin <adres zdalnego repo - skopiowany z gitlab> / -> podłaczenie origin/master do master

/ git push -u (--set upstream) origin master / -> to tylko za pierwszym razemc celem powiazania repo zdalnego z lokalnym
i wymiany pierwszych zmian miedzy nimi. Potem wystarczy juz git push

# Gdy na zdalnym repo pojawia sie nowe zmiany wczytane przez innego usera:

/ git fetch / -> zaciagniecie zmian ze zdalnego repo do lokalnego
/ git merge origin/master / -> lokalny master zostal odswiezony zadalnym origin/master

# Jesli nie mamy uprawnien do wywylania zmian do zdalnego repo to mozna wykorzystac fork

Fork - > Jest to obraz mastera zdalnego na ktory mozna wywsylac zmiany z lokalnego repo a potem za pomoca pull request proponowac
wgranie ich na mastera zdalnego

/ pull request / -> wyslanie z brancha / forka żadania zmigrowania zmian na mastera

Jeśli zmiany zostana zaakceptowane wlasciciel repo zdalnego / galezi master wykonuje merge -> wrzuca zmiany z
forka / brancha roboczego na master

Po wszystkim mozna posprzatac branche:

/ git branch -D develop / -> usuwanie brancha 'develop' -> usuniecie lokalnego brancha
/ gir push origin --delete develop / -> usuwania brancha zdalnego develop

/ git remote / -> sprawdzenie listy branchy zdalnych
/ git fetch <nazwa branch> / -> odświezenie lokalnego brancha wskazanym z listy repo zdalnym
/ git pull / -> ścągnij dane z repo zdalnego do lokalnego

[9] Rozwiazywanie konfliktów

 - zmiany w pliku przed merge branchy
 - usuniecie pliku z jednego brancha przed merge
 - rozwizywanie konfliktow przy pull request

 [10] Rebase -> wykonujemy przed polaczeniem zmian -> nalezy wykonywac ostrożnie bo zmienia historie repo zdalnego

 / git merge <nazwa brancha> / -> polaczenie zmian na dwoch branchach

 Powyzsze powoduje dodanie komentarza dla commitu informujacego o polaczeniu branchy (zmian)

 przed merge: / git rebase master (jeśli robię rebase develop) / -> przelczam sie na drugi barnch ->
/ git merge develop / -> dzieki temu nie zostal utworzony zaden dodatkowy commit reprezentujacy operacje merge





